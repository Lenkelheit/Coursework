<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataAccess</name>
    </assembly>
    <members>
        <member name="T:DataAccess.Context.AppContext">
            <summary>
            Contains DbSets
            </summary>
        </member>
        <member name="P:DataAccess.Context.AppContext.Users">
            <summary>
            A user set
            </summary>
        </member>
        <member name="P:DataAccess.Context.AppContext.Photos">
            <summary>
            A photo set
            </summary>
        </member>
        <member name="P:DataAccess.Context.AppContext.PhotoLike">
            <summary>
            A photo likes set
            </summary>
        </member>
        <member name="P:DataAccess.Context.AppContext.Comments">
            <summary>
            A comments set
            </summary>
        </member>
        <member name="P:DataAccess.Context.AppContext.CommentLike">
            <summary>
            A comment likes set
            </summary>
        </member>
        <member name="P:DataAccess.Context.AppContext.Mossages">
            <summary>
            A messages set
            </summary>
        </member>
        <member name="P:DataAccess.Context.AppContext.Subjects">
            <summary>
            A subject set
            </summary>
        </member>
        <member name="M:DataAccess.Context.AppContext.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Context.AppContext"/>
            </summary>
        </member>
        <member name="M:DataAccess.Context.AppContext.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Context.AppContext"/>
            </summary>
            <param name="connectionString">
            A connection string
            </param>
        </member>
        <member name="M:DataAccess.Context.AppContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            Build a database table by current model configuration
            </summary>
            <param name="modelBuilder">
            Configurate model 
            </param>
        </member>
        <member name="T:DataAccess.Context.UnitOfWork">
            <summary>
            Contains all the repositories
            <para/>
            Implements a Singleton pattern
            </summary>
        </member>
        <member name="M:DataAccess.Context.UnitOfWork.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Context.UnitOfWork"/>
            </summary>
            <param name="connectionString">
            A connection string to Data Base
            </param>
        </member>
        <member name="M:DataAccess.Context.UnitOfWork.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Context.UnitOfWork"/>
            </summary>
        </member>
        <member name="M:DataAccess.Context.UnitOfWork.Finalize">
            <summary>
            Release managed resources
            </summary>
        </member>
        <member name="P:DataAccess.Context.UnitOfWork.Instance">
            <summary>
            Gets an instance of <see cref="T:DataAccess.Context.UnitOfWork"/>
            </summary>
        </member>
        <member name="P:DataAccess.Context.UnitOfWork.UserRepository">
            <summary>
            Gets user repository
            </summary>
        </member>
        <member name="P:DataAccess.Context.UnitOfWork.PhotoRepository">
            <summary>
            Gets photo repository
            </summary>
        </member>
        <member name="P:DataAccess.Context.UnitOfWork.PhotoLikeRepository">
            <summary>
            Gets photo like repository
            </summary>
        </member>
        <member name="P:DataAccess.Context.UnitOfWork.CommentRepository">
            <summary>
            Gets comment repository
            </summary>
        </member>
        <member name="P:DataAccess.Context.UnitOfWork.CommentLikeRepository">
            <summary>
            Gets comment like repository
            </summary>
        </member>
        <member name="P:DataAccess.Context.UnitOfWork.MessageRepository">
            <summary>
            Gets message repository
            </summary>
        </member>
        <member name="P:DataAccess.Context.UnitOfWork.SubjectRepository">
            <summary>
            Gets subject repository
            </summary>
        </member>
        <member name="M:DataAccess.Context.UnitOfWork.Save">
            <summary>
            Confirm all transaction to DataBase
            </summary>
            <returns>
            Amount of transaction that has been confirmed
            </returns>
        </member>
        <member name="T:DataAccess.Entities.Comment">
            <summary>
            Maps to Comments table
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Comment.Id">
            <summary>
            Unique indetifier
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Comment.User">
            <summary>
            An user that wrote a comment
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Comment.Photo">
            <summary>
            A photo to wich comment has been wriiten
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Comment.Likes">
            <summary>
            A collection of likes to current comment
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Comment.Text">
            <summary>
            Comment's text
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Comment.Date">
            <summary>
            The date when comment has been published
            </summary>
        </member>
        <member name="T:DataAccess.Entities.CommentLike">
            <summary>
            Maps tp comment likes table
            </summary>
        </member>
        <member name="P:DataAccess.Entities.CommentLike.Comment">
            <summary>
            A comment to which like has been set
            </summary>
        </member>
        <member name="T:DataAccess.Entities.LikeBase">
            <summary>
            An abstract class for <see cref="T:DataAccess.Entities.CommentLike"/> and <see cref="T:DataAccess.Entities.PhotoLike"/>
            </summary>
        </member>
        <member name="P:DataAccess.Entities.LikeBase.Id">
            <summary>
            Unique indetifier
            </summary>
        </member>
        <member name="P:DataAccess.Entities.LikeBase.User">
            <summary>
            A user that has set the like
            </summary>
        </member>
        <member name="P:DataAccess.Entities.LikeBase.IsLiked">
            <summary>
            Define is it like or dislike
            </summary>
        </member>
        <member name="T:DataAccess.Entities.Message">
            <summary>
            Maps to Messages table 
            <para/>
            Messages are sent to the Admin
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Message.Id">
            <summary>
            Unique indetifier
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Message.Text">
            <summary>
            A text of the message
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Message.User">
            <summary>
            A user that wrote a comment
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Message.Subject">
            <summary>
            A subject of the message
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Message.Date">
            <summary>
            A date, when message was send
            </summary>
        </member>
        <member name="T:DataAccess.Entities.Photo">
            <summary>
            Maps to Photo table
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Photo.Id">
            <summary>
            Unique indetifier
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Photo.Path">
            <summary>
            A server path to a photo
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Photo.User">
            <summary>
            A user that has been posted a photo
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Photo.Likes">
            <summary>
            A collection of likes and dislikes to photo
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Photo.Comments">
            <summary>
            A comment collection relative to photo
            </summary>
        </member>
        <member name="T:DataAccess.Entities.PhotoLike">
            <summary>
            Maps to Photo Like table
            </summary>
        </member>
        <member name="P:DataAccess.Entities.PhotoLike.Photo">
            <summary>
            A photo to which like has been set
            </summary>
        </member>
        <member name="T:DataAccess.Entities.Subject">
            <summary>
            Maps to Subject table
            <para/>
            Has been used as a subject to admin message
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Subject.Id">
            <summary>
            Unique indetifier
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Subject.Name">
            <summary>
            Subject's name
            </summary>
        </member>
        <member name="P:DataAccess.Entities.Subject.Messages">
            <summary>
            A collection of messages with current subject
            </summary>
        </member>
        <member name="T:DataAccess.Entities.User">
            <summary>
            Maps to User table
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.Id">
            <summary>
            Unique indetifier
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.MainPhotoPath">
            <summary>
            A local path tp avatar
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.NickName">
            <summary>
            Nickname of the user
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.Password">
            <summary>
            Password of the user
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.Photos">
            <summary>
            A collection of photos posted by user
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.Followers">
            <summary>
            A follower collection
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.Following">
            <summary>
            A following collection
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.Comments">
            <summary>
            A comments collection
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.PhotoLikes">
            <summary>
            A likes to photo collection
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.CommentLikes">
            <summary>
            A like to comments collection
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.Messages">
            <summary>
            A messages collection
            </summary>
        </member>
        <member name="P:DataAccess.Entities.User.IsAdmin">
            <summary>
            Defines is current user an admin
            </summary>
        </member>
        <member name="T:DataAccess.Interfaces.IGenericRepository`1">
            <summary>
            Reprents interface for classes which will proxy behind data acsess and buisness logic
            </summary>
            <typeparam name="TEntity">Data class work with</typeparam>
        </member>
        <member name="M:DataAccess.Interfaces.IGenericRepository`1.Count">
            <summary>
            Counts records in data set
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:DataAccess.Interfaces.IGenericRepository`1.Count(System.Func{`0,System.Boolean})">
            <summary>
            Counts records in data set which satisfy the condition
            </summary>
            <param name="predicate">The condition by which record should be count</param>
            <returns>Returns the amount of records in data set which satisfy the condition</returns>
        </member>
        <member name="M:DataAccess.Interfaces.IGenericRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Returns data from data base
            </summary>
            <param name="filter">Filter for data</param>
            <param name="orderBy">The order of the received items</param>
            <param name="includeProperties">Included properties</param>
            <returns>Queried entities collection</returns>
        </member>
        <member name="M:DataAccess.Interfaces.IGenericRepository`1.GetByID(System.Object)">
            <summary>
            Returns entity by id
            </summary>
            <param name="id">Entities id</param>
            <returns>Finded entity</returns>
        </member>
        <member name="M:DataAccess.Interfaces.IGenericRepository`1.Insert(`0)">
            <summary>
            Inserts data in data base
            </summary>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:DataAccess.Interfaces.IGenericRepository`1.Delete(System.Object)">
            <summary>
            Deletes object by id
            </summary>
            <param name="id">Objects id</param>
        </member>
        <member name="M:DataAccess.Interfaces.IGenericRepository`1.Delete(`0)">
            <summary>
            Deletes preset entity
            </summary>
            <param name="entityToDelete">Entity to delete</param>
        </member>
        <member name="M:DataAccess.Interfaces.IGenericRepository`1.Update(`0)">
            <summary>
            Updates data base
            </summary>
            <param name="entityToUpdate">Entity to update</param>
        </member>
        <member name="T:DataAccess.Repositories.CommentLikeRepository">
            <summary>
            Defines algorithms to work with Data Table with <see cref="T:DataAccess.Entities.CommentLike"/>
            </summary>
        </member>
        <member name="M:DataAccess.Repositories.CommentLikeRepository.#ctor(DataAccess.Context.AppContext)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Repositories.CommentLikeRepository"/>
            </summary>
            <param name="context">DataContext</param>
        </member>
        <member name="T:DataAccess.Repositories.CommentRepository">
            <summary>
            Defines algorithms to work with Data Table with <see cref="T:DataAccess.Entities.Comment"/>
            </summary>
        </member>
        <member name="M:DataAccess.Repositories.CommentRepository.#ctor(DataAccess.Context.AppContext)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Repositories.CommentRepository"/>
            </summary>
            <param name="context">Data context</param>
        </member>
        <member name="T:DataAccess.Repositories.GenericRepository`1">
            <summary>
            Proxy data acsess and view model
            </summary>
            <typeparam name="TEntity">
            Data class work with
            </typeparam>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.#ctor(DataAccess.Context.AppContext)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Repositories.GenericRepository`1"/>
            </summary>
            <param name="context">Data context</param>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.Count">
            <summary>
            Counts records in data set
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.Count(System.Func{`0,System.Boolean})">
            <summary>
            Counts records in data set which satisfy the condition
            </summary>
            <param name="predicate">The condition by which record should be count</param>
            <returns>Returns the amount of records in data set which satisfy the condition</returns>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Gets data from data base
            </summary>
            <param name="filter">Filter for data</param>
            <param name="orderBy">The order of the received items</param>
            <param name="includeProperties">Included properties</param>
            <returns>Queried entities collection</returns>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.GetByID(System.Object)">
            <summary>
            Gets entity by id
            </summary>
            <param name="id">Entities id</param>
            <returns>Finded entity</returns>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.Insert(`0)">
            <summary>
            Inserts data in data base
            </summary>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.Delete(System.Object)">
            <summary>
            Deletes object by id
            </summary>
            <param name="id">Objects id</param>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.Delete(`0)">
            <summary>
            Deletes preset entity
            </summary>
            <param name="entityToDelete">Entity to delete</param>
        </member>
        <member name="M:DataAccess.Repositories.GenericRepository`1.Update(`0)">
            <summary>
            Updates data base
            </summary>
            <param name="entityToUpdate">Entity to update</param>
        </member>
        <member name="T:DataAccess.Repositories.MessageRepository">
            <summary>
            Defines algorithms to work with Data Table with <see cref="T:DataAccess.Entities.Message"/>
            </summary>
        </member>
        <member name="M:DataAccess.Repositories.MessageRepository.#ctor(DataAccess.Context.AppContext)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Repositories.MessageRepository"/>
            </summary>
            <param name="context">Data context</param>
        </member>
        <member name="T:DataAccess.Repositories.PhotoLikeRepository">
            <summary>
            Defines algorithms to work with Data Table with <see cref="T:DataAccess.Entities.PhotoLike"/>
            </summary>
        </member>
        <member name="M:DataAccess.Repositories.PhotoLikeRepository.#ctor(DataAccess.Context.AppContext)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Repositories.PhotoLikeRepository"/>
            </summary>
            <param name="context">Daata context</param>
        </member>
        <member name="T:DataAccess.Repositories.PhotoRepository">
            <summary>
            Defines algorithms to work with Data Table with <see cref="T:DataAccess.Entities.Photo"/>
            </summary>
        </member>
        <member name="M:DataAccess.Repositories.PhotoRepository.#ctor(DataAccess.Context.AppContext)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Repositories.PhotoRepository"/>
            </summary>
            <param name="context">Data context</param>
        </member>
        <member name="T:DataAccess.Repositories.SubjectRepository">
            <summary>
            Defines algorithms to work with Data Table with <see cref="T:DataAccess.Entities.Subject"/>
            </summary>
        </member>
        <member name="M:DataAccess.Repositories.SubjectRepository.#ctor(DataAccess.Context.AppContext)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Repositories.SubjectRepository"/>
            </summary>
            <param name="context">Data context</param>
        </member>
        <member name="T:DataAccess.Repositories.UserRepository">
            <summary>
            Defines algorithms to work with Data Table with <see cref="T:DataAccess.Entities.User"/>
            </summary>
        </member>
        <member name="M:DataAccess.Repositories.UserRepository.#ctor(DataAccess.Context.AppContext)">
            <summary>
            Initialize a new instance of <see cref="T:DataAccess.Repositories.UserRepository"/>
            </summary>
            <param name="context">Data context</param>
        </member>
    </members>
</doc>
